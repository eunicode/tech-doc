[
  {
    "category": "Functions",
    "title": "Rest parameters",
    "urlfrag": "Rest_parameters",
    "info": "<p>The rest parameter syntax allows us to create functions that take a variable number of arguments. In a way, rest syntax is like the opposite of `spread` syntax. `Spread` expands an array into its elements, while `rest` condenses elements into an array.</p><p>There are three main differences between rest parameters and the `arguments` object:</p>        <li>Rest parameters are only the ones that haven't been given a separate name (i.e. formally defined in function expression), while the arguments object contains all arguments passed to the function.</li>        <li>The `arguments` object is not a real array, while rest parameters are `Array` instances, meaning methods like `sort`, `map`, `forEach` or `pop` can be applied on it directly;</li>        <li>The `arguments` object has additional functionality specific to itself (like the callee property).</li><p>The rest syntax can also be used in array and object destructuring assignments.</p>",
    "code": "function f(a, b, ...theArgs) {\n //...\n}"
  },
  {
    "category": "Operators",
    "title": "Spread syntax",
    "urlfrag": "Spread_syntax",
    "info": "<p>Spread syntax expands or \"spreads\" iterables like arrays and objects.<p><p>Spread syntax can be used to<p><li>replace <pre>Function.prototype.apply<pre></li>        <li>to copy arrays</li>        <li>concatenate arrays</li>        <li>clone objects</li>        <li>merge objects</li><p>It is an alternative to <pre>Object.create</pre> and <pre>slice</pre>.</p>",
    "code": "function sum(x, y, z) {\n    return x + y + z;\n        }\n        const numbers = [1, 2, 3];\n        sum(...numbers); // 6"
  },
  {
    "category": "Expressions",
    "title": "Destructuring assignment",
    "urlfrag": "Destructuring_assignment",
    "info": "<p>The destructuring assignment syntax unpacks values from objects and assigns them to variables. It's somewhat similar to spread syntax because they both unpack values. It can be used with rest syntax.</p>",
    "code": "var [a, ...b] = [1, 2, 3]\n        // a = 1\n        // b = [2, 3]"
  },
  {
    "category": "Object",
    "title": "Object.freeze()",
    "urlfrag": "Object.freeze()",
    "info": "<p>The Object.freeze() method freezes an object. In other words, it prevents data mutation of the object passed into it.</p>",
    "code": "Object.freeze(obj)"
  },
  {
    "category": "Functions",
    "title": "Default parameters",
    "urlfrag": "Default_parameters",
    "info": "<p>Default function parameters allow formal parameters to be initialized with default values if no value or undefined is passed (MDN).</p>",
    "code": "function multiply(a, b = 1) {\n    return a * b;\n        }\n  \n        multiply(5);\n        // 5"
  }
]
